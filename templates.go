// Code generated by go-bindata.
// sources:
// templates/app/echo.tpl
// templates/app/gin.tpl
// templates/app/grpc.tpl
// templates/app/iris.tpl
// templates/app/ozzo.tpl
// templates/gitignore.tpl
// templates/sql/1.down.tpl
// templates/sql/1.up.tpl
// templates/sql/sql.tpl
// templates/sql/type.tpl
// DO NOT EDIT!

package conseil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAppEchoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xc1\x6a\xdc\x30\x10\xbd\xeb\x2b\x06\x9d\x6c\xba\x48\x77\x43\x0e\x65\x49\x5b\x9a\xb0\x1b\x76\xd3\x53\xe9\x41\x91\xa7\xb6\x88\xad\x31\xa3\x71\x5c\x58\xfc\xef\x45\xab\x4d\x7d\x69\xeb\x8b\x25\xde\x3c\xbd\x37\xef\x4d\xce\xbf\xba\x0e\x61\x74\x21\x2a\x15\xc6\x89\x58\xa0\x52\x00\x00\x3a\xa2\xd8\x5e\x64\xd2\xaa\xdc\xbb\x20\xfd\xfc\x62\x3c\x8d\x76\x70\x2f\x49\x9c\x7f\xb5\xe8\x7b\xd2\xff\x87\xed\x18\xda\x76\xc0\xc5\x31\x6a\x55\x2b\xf5\xe6\x18\x5c\xdb\x32\xdc\x81\xbe\x5c\xc0\x7c\xa1\x24\xb0\xae\x4d\x3e\x3f\x65\xf9\x75\xd5\x4a\xfd\x9c\xa3\xbf\xba\xaa\x6a\xb8\x5c\x05\xac\x85\x3d\xa3\x13\x84\x88\x0b\x30\xcd\x82\x7c\x05\x18\x9a\x3b\xc8\x4a\xe6\x80\x4b\x55\xab\xf7\xe9\x33\xca\x3c\x81\xa7\x71\xa4\x08\x9b\x89\xc2\x31\xdf\x12\x96\x3d\xf3\xb7\xa1\xe6\x91\xba\x0e\xb9\xaa\x77\x7f\x03\x4f\xe8\xe9\x6d\x43\x37\xad\x13\x76\x21\x09\x32\xf4\xe8\x06\xe9\x01\x63\x3b\x51\x88\x72\x13\xfb\x7c\xff\x5c\x69\x5b\x30\xbd\xbb\x0d\x6d\xec\x03\x2d\x30\x64\x7e\x0c\xb1\x03\x8a\x0d\xe4\xdc\x1b\x6b\xff\x91\xcf\x3b\xef\xe3\x34\x0d\xc1\x3b\x09\x14\x21\x89\x63\xc1\xd6\xc0\x13\x63\x4a\xb0\x7f\x3e\x3d\x7e\xd8\x83\x10\xa4\x7e\x16\x68\x69\x89\xe6\x66\xa6\x6c\x68\x3e\x39\x71\x43\xc5\xe6\x9c\x89\x55\x6e\xa4\xae\xd5\xaa\x94\xb5\x70\xef\x7b\x82\xde\xc5\x76\x40\x2e\x4d\x14\xc7\x95\x2f\x39\xef\x29\x0a\xfe\x92\x1a\x90\x99\xf8\xd6\x0f\xa3\xcc\x1c\xc1\x9b\xaf\xe7\xe3\xa1\xca\x0b\xe4\xa7\x65\x4e\xc7\x87\x1d\x8c\x6e\xfa\x9e\x84\x43\xec\x7e\x94\xdf\xe5\x4f\xbc\x3a\x5d\xa7\x74\x03\xfa\xf8\xa0\x4b\xb0\x6b\xad\xd6\xdf\x01\x00\x00\xff\xff\xe2\xb7\xb1\x6d\x9b\x02\x00\x00")

func templatesAppEchoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppEchoTpl,
		"templates/app/echo.tpl",
	)
}

func templatesAppEchoTpl() (*asset, error) {
	bytes, err := templatesAppEchoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/echo.tpl", size: 667, mode: os.FileMode(420), modTime: time.Unix(1529810613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppGinTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xeb\x30\x10\x84\xef\xfa\x15\x83\x4e\xf6\x7b\x79\x56\x78\x47\x43\x0e\xc5\x2d\x09\x6d\x49\x42\x9a\x3f\xa0\xda\x1b\x5b\xd4\x59\x19\x69\xdd\x14\x82\xff\x7b\xb1\x9d\xd0\x53\x6f\xcb\x8e\xbe\x61\x34\xdb\xd9\xf2\xc3\xd6\x84\xb3\x75\xac\x94\x3b\x77\x3e\x08\x12\x05\x00\xba\x76\xd2\xf4\xef\x59\xe9\xcf\xa6\x76\xfc\xaf\xf6\xec\xca\x71\xd2\x2a\x55\xea\xd3\x06\xd8\xaa\x0a\x58\x41\x5f\xaf\xc8\x36\x3e\x0a\x86\x21\x1f\xe7\xfd\x68\x32\x0c\x5a\xa9\x53\xcf\xe5\xe4\x9d\xa4\xb8\x4e\xae\xc6\xa0\x08\x64\x85\xc0\x74\x41\xf0\xbd\x50\x98\x84\x80\x7c\x85\xda\x71\xf6\x48\x27\xdb\xb7\x92\xa4\xea\x0e\x1c\xa8\x76\x51\x28\xa0\x21\xdb\x4a\x03\xe2\xaa\xf3\x8e\x65\xe6\xb2\xf5\xd3\x31\xd1\x66\xd6\xf4\xe2\xf6\xe8\x87\xde\xfa\x0b\xda\x91\x67\xc7\x35\x3c\xe7\x68\x44\xba\xdc\x98\x5f\x62\xdf\xb9\x87\xae\x6b\x5d\x69\xc5\x79\x46\x14\x1b\x84\xaa\x0c\xfb\x40\x31\xa2\x38\x1e\x5e\xff\x16\x10\x8f\xd8\xf4\x82\xca\x5f\x38\xbb\x85\x39\xf4\x9c\x8c\xbd\xa4\x6a\x50\xca\x18\xac\x1d\xa3\xb1\x5c\xb5\x14\xe6\x36\xe6\x78\x49\x89\x3f\xe3\x67\x0b\xcf\x42\x5f\x72\x6f\xa7\xcc\x9e\xdf\x76\xdb\xe4\xff\x72\xb9\x98\xba\xd8\xcc\xeb\xe9\x1c\x51\xac\xf4\x51\xe7\xd0\xbb\x17\xbd\x98\xf6\x43\xaa\x86\xef\x00\x00\x00\xff\xff\x04\x8c\x36\xa6\xc2\x01\x00\x00")

func templatesAppGinTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppGinTpl,
		"templates/app/gin.tpl",
	)
}

func templatesAppGinTpl() (*asset, error) {
	bytes, err := templatesAppGinTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/gin.tpl", size: 450, mode: os.FileMode(420), modTime: time.Unix(1529810597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppGrpcTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xc1\x6a\x1c\x31\x0c\xbd\xfb\x2b\x54\x1f\xca\x0c\xdd\xd8\xf7\x81\x3d\x94\x85\x52\x4a\x08\x21\xed\x61\x6f\xc5\xeb\x68\xbd\xa6\x8e\x65\x64\xcd\xce\x61\x99\x7f\x2f\xf6\xa4\x4d\x2e\x39\xd9\x4f\x4f\xef\xe9\x49\xd6\x06\x9a\x02\x66\x64\x27\x08\x85\x49\xc8\x6f\x8f\xe5\xe2\x4d\xff\xc1\xdd\x5d\xa0\xdf\x34\xcb\xbe\xa4\x39\xc4\x5c\xf7\x81\x8b\x9f\x8c\x2a\xce\xff\x71\x01\xe1\xc5\xc5\xac\x54\x7c\x29\xc4\x02\x83\x02\xd0\x89\x82\x6e\x6f\x46\xd1\xaa\x7d\x02\x51\x48\x68\x02\x25\x97\x83\x21\x0e\xb6\x79\xe8\x8f\x29\xcb\x78\x4e\xe8\x25\x52\xd6\x6a\x54\xea\x3c\x67\xdf\x07\x0d\x23\xdc\x14\x80\xb5\x70\x60\x6c\xa1\x33\x2e\x50\x91\xaf\xc8\x0a\xa0\xf2\x15\xa6\x3d\x34\x07\xf3\x80\xcb\xcf\x5e\x1f\x46\xb5\x29\x9e\x30\xc4\x2a\xc8\xdb\x86\xa7\xf9\xdc\x85\xd1\x23\x2c\x51\x2e\x6f\x2e\xd6\x42\x39\x99\x7f\xdd\xc7\xe3\xf1\xd5\xa7\xf2\x75\x07\x9f\xcb\xc9\x6c\xf8\xb6\x76\xe3\xb7\xa4\xff\x25\xad\xb3\x73\x29\xd6\x1d\x20\x73\x0b\x95\x51\xcc\x7d\xa3\xf3\xa0\xc5\x17\xbd\xeb\x95\x1f\x14\xf3\x77\xaa\xf2\x48\x2c\x83\xbe\xdd\xc0\x34\x04\xeb\xaa\x77\xd0\x61\x23\x1a\x1c\x47\x05\x10\xcf\xdd\xed\xd3\x1e\x72\x4c\xfd\x10\x00\x89\x82\xf9\xe6\xc4\xa5\x01\x99\x5b\xd3\xfa\xba\xee\x03\x2d\x2d\x80\x60\x8e\x39\x00\xe5\x09\x2e\x22\x65\xb2\xf6\xdd\x94\xe9\xdd\x88\x4d\xf5\xb5\x94\x14\xbd\x6b\xfb\x40\x15\xc7\x82\xcf\x06\x1e\x19\x6b\x85\xc3\xaf\xa7\xfb\x2f\x07\x10\x82\x7a\x99\x05\x9e\x69\xc9\x66\x3b\xfa\x76\x91\x21\xc5\x3a\xaa\x55\xfd\x0d\x00\x00\xff\xff\x78\xd2\x37\x98\x56\x02\x00\x00")

func templatesAppGrpcTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppGrpcTpl,
		"templates/app/grpc.tpl",
	)
}

func templatesAppGrpcTpl() (*asset, error) {
	bytes, err := templatesAppGrpcTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/grpc.tpl", size: 598, mode: os.FileMode(420), modTime: time.Unix(1529978380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppIrisTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xcd\x8e\x9b\x30\x18\x3c\xd7\x4f\x31\xf2\xc9\xa8\x11\xbe\x23\xf5\x10\x71\x68\xfa\x97\x44\x69\x5f\xe0\x2b\xf6\x82\x15\x62\x5b\xf6\xc7\x12\x29\xe2\xdd\x57\x40\xd8\x3d\xed\xcd\x9a\xf9\xe6\xc7\x13\xa9\xb9\x52\x6b\x71\x23\xe7\x85\x70\xb7\x18\x12\x43\x09\x00\x90\xad\xe3\x6e\xf8\x5f\x36\xe1\xa6\xaf\xc4\x94\x28\x6b\x97\x5c\x96\xa2\x10\xe2\x95\x12\xc8\x98\x84\x6f\x98\xb1\x72\x6f\x4c\x52\xf2\xf1\x40\x79\x08\x99\x31\x4d\xd5\xfc\x3e\xcf\x6e\xd3\x24\x0b\x21\x5e\x06\xdf\x2c\x29\xaa\xc0\x63\xf1\xd7\x1a\x75\xb2\xc4\x16\xde\x8e\x48\x61\x60\x9b\x16\x82\x62\x44\xf5\xf4\x3d\xda\x51\x15\x62\xbb\xbf\xd8\xd6\x65\xb6\x09\x9d\xa5\x9e\x3b\x58\x6f\x62\x70\x9e\x37\x59\xf9\xdd\xb2\x92\x7a\x65\xe5\xee\x79\xf6\xa1\x3f\x86\x11\xfd\xec\xe0\x9d\x6f\x11\x7c\x85\x8e\x39\x56\x5a\x7f\x52\x7c\xd3\xed\x63\xec\x5d\x43\xec\x82\x47\x66\x4a\x6c\x4d\x89\x73\xb2\x39\xa3\xfe\x77\xf9\xfd\xb5\x06\x07\xe4\x6e\x60\x98\x30\xfa\xf2\xbd\xce\x65\xf0\x6a\x5e\xa9\x10\x93\x10\x5a\xe3\x47\x72\x19\x07\xf2\xa6\xb7\x69\x5d\x64\x6d\xa8\x1a\xbe\xaf\xff\xad\x83\x67\x7b\xe7\x6d\xa3\x86\xef\xe5\xcf\xbf\xa7\xa3\x5a\xc8\x3f\x14\x57\xf8\x8b\xcc\x4c\x3c\x64\x59\x41\x9e\x7e\xc9\xdd\x02\x4e\x73\xca\x5b\x00\x00\x00\xff\xff\x66\x04\x8a\x2c\xd0\x01\x00\x00")

func templatesAppIrisTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppIrisTpl,
		"templates/app/iris.tpl",
	)
}

func templatesAppIrisTpl() (*asset, error) {
	bytes, err := templatesAppIrisTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/iris.tpl", size: 464, mode: os.FileMode(420), modTime: time.Unix(1529810568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppOzzoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xb1\x6e\xdb\x30\x10\xdd\xf9\x15\x07\x4e\x52\xeb\x90\xbb\x81\x0c\x81\x87\x06\xad\x61\x1b\x71\x8a\x0e\x45\x07\x56\xba\x50\x44\x25\x9e\x70\x3c\xc5\xad\x0d\xfd\x7b\x41\x49\x8e\xa7\xa2\xd1\x20\x51\xbc\xf7\xee\xee\xbd\xd7\xbb\xea\x97\xf3\x08\x9d\x0b\x51\xa9\xd0\xf5\xc4\x02\x85\x02\x00\xd0\x2d\x79\x3d\x9f\x22\x8a\x6d\x44\x7a\xad\xe6\x7f\x1f\xa4\x19\x7e\x9a\x8a\x3a\xeb\xe9\x8e\xce\x67\xb2\xf9\x75\xc7\x34\x48\x88\x57\xd6\x7f\x50\xd6\x55\x15\xa6\xf4\x4e\x70\x45\x51\x30\x8a\x56\xa5\x52\xaf\x8e\xc1\xd5\x35\xc3\x3d\xe8\xcb\x05\xcc\x23\x25\x81\x71\x5c\xe7\xf3\x21\x0b\x18\x47\xad\xd4\xcb\x10\xab\x49\x57\x51\xc2\x65\x1a\x62\x2d\x6c\x18\x9d\x20\x44\x3c\x41\xee\x8c\x3c\x15\x18\xd6\xf7\xb0\x4c\x32\x3b\x3c\x15\xa5\xba\x12\x8e\x28\x43\x0f\x15\x75\x1d\x45\xe8\x42\x5d\xb7\x78\x72\x8c\x33\xcd\x7c\x4d\x38\x9b\x95\x9f\x59\x8f\xd9\x92\xf7\xc8\x45\x4b\xde\x1c\x38\x44\x79\x29\x57\x6f\x90\x45\x85\x79\xfe\xd3\xe3\x0e\x3d\x49\x70\x42\x5c\x5c\xaf\x3f\x1f\xf7\xbb\x05\x7d\xdb\xe0\x09\x7d\x48\x82\x0c\x0d\xba\x56\x1a\xc0\x58\xf7\x14\xa2\x2c\x2b\x7c\x42\x29\xb4\x9d\x6b\x7a\xb5\x80\x6e\xec\x1d\x9d\xa0\xcd\xfc\x18\xa2\x07\x8a\x6b\xc8\x41\xae\xad\xfd\x87\x71\x57\xde\x43\xdf\xb7\xa1\x72\x12\x28\x42\x12\xc7\x82\xb5\x81\x03\x63\x4a\xb0\x79\x7e\xda\x7e\xdc\x80\x10\xa4\x66\x10\xa8\xe9\x14\xcd\x44\xcb\x9d\xcd\xa3\x8b\x75\x8b\x85\xb6\x7a\x05\x5c\xde\xee\xb7\xd3\x12\x0f\xb1\x3e\x22\xbf\x62\x91\xf3\x5b\x41\x0c\x6d\xa9\x46\xa5\xac\x85\xfd\xf9\x4c\xd0\x4c\x64\x9e\xb3\x9b\xa5\x14\x15\x7c\xb8\x46\xb3\xc9\x3e\xfd\x96\x12\x90\x99\x78\x49\x95\x51\x06\x8e\x50\x99\x6f\x1c\x04\x8b\xce\xf5\xdf\x93\x70\x88\xfe\xc7\xfc\xb9\xbc\xb9\xaf\x93\x38\x19\x92\x5e\x83\xde\x7f\xd1\xb3\xcf\x63\x9e\xff\x37\x00\x00\xff\xff\xf3\xe7\xa8\x4a\x06\x03\x00\x00")

func templatesAppOzzoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppOzzoTpl,
		"templates/app/ozzo.tpl",
	)
}

func templatesAppOzzoTpl() (*asset, error) {
	bytes, err := templatesAppOzzoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/ozzo.tpl", size: 774, mode: os.FileMode(420), modTime: time.Unix(1529977014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignoreTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x0f\xd9\x99\x54\x39\x43\x4b\xbb\x28\x14\xba\xe9\x01\x22\x5b\x63\x79\x40\xd5\x08\x69\x94\xd4\x84\xf4\xec\x45\x34\x9b\xcf\x83\xff\x78\x07\xbc\x48\xf6\x55\xb8\x61\xd5\x8a\x52\x35\x56\xff\xdd\xe0\x73\x40\x49\x3d\x4a\x6e\x34\x39\xfe\xe1\xff\xfd\xa5\xc9\x85\x94\x68\x72\x4d\x07\xee\x49\x66\xa2\x03\xbe\xb8\x19\xe6\x51\xda\x8f\x98\xbb\xa4\x80\xab\xd8\x86\x73\x54\xd8\xf8\x9e\x96\x33\x4d\x6e\xe0\xd0\x3f\xbb\x95\x6e\xd0\x15\xb6\x31\xa2\x62\xd1\x0b\x57\x1f\x19\xa6\x9a\x8e\x68\x85\x17\x59\x65\xf1\x29\xed\xb8\x6e\x9c\xd1\x1b\x3f\x92\x1f\x62\xfc\xfe\xfa\x46\x93\xd3\x6e\x44\x4e\x02\x7b\x3a\x5d\x38\x07\xad\x74\xba\xdd\xe0\x9e\x4b\xc1\xfd\xfe\x17\x00\x00\xff\xff\x3a\xf0\xfe\x77\xda\x00\x00\x00")

func templatesGitignoreTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignoreTpl,
		"templates/gitignore.tpl",
	)
}

func templatesGitignoreTpl() (*asset, error) {
	bytes, err := templatesGitignoreTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gitignore.tpl", size: 218, mode: os.FileMode(420), modTime: time.Unix(1529686846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSql1DownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xcd\x4d\xc6\x30\x10\x84\xe1\x3b\x55\x4c\x01\x24\x12\x7d\x70\x00\x7d\x15\xac\xed\x21\x5e\x61\xaf\x89\x77\x4d\xda\x47\xfc\x49\x48\x14\x30\xcf\xbc\xdb\x86\xa7\x26\x99\xb8\x3d\x3f\xc2\x43\x82\x9d\x16\x8e\xa8\x12\x90\x49\x2c\x67\x41\x0c\x4c\xbe\x73\x06\xa2\x12\x45\x42\x92\x38\xe1\xb9\xb2\x0b\xba\x1e\x53\x42\x87\xdd\x6d\x1b\x2e\x8d\xaa\x86\xa8\xea\x78\xd1\xc6\x1d\xb7\x95\x9c\xe7\xa2\xc5\xbf\x01\xe6\x68\x2d\x49\x7e\x75\x78\x1d\xab\x15\x24\xe2\xed\xb3\xa7\xfc\xb1\x04\xb6\x97\x71\xd9\xee\x67\xfb\x32\xef\x71\x55\x4e\xc2\xa0\x96\xe7\x4f\xb1\xe0\xfb\x25\x13\xb6\x7a\xe2\x44\xe2\xa1\x66\x6a\xc7\xaf\x85\x87\xfd\x23\x00\x00\xff\xff\xf0\xf8\xca\x68\xf0\x00\x00\x00")

func templatesSql1DownTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSql1DownTpl,
		"templates/sql/1.down.tpl",
	)
}

func templatesSql1DownTpl() (*asset, error) {
	bytes, err := templatesSql1DownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/1.down.tpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1529686846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSql1UpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x51\x4a\x04\x31\x10\x84\xe1\x77\x4f\x51\x07\x70\x02\xde\xc3\x07\x65\x4f\xd0\x49\xca\x49\x43\xd2\xb3\x9b\xee\xb0\xe0\xe9\x65\xc7\x79\xaf\xfa\xf8\xb7\x0d\x5f\x5d\x0a\x71\xfb\xfe\x84\x87\x04\x07\x2d\x1c\xd1\x24\x20\x93\x58\xce\x8a\x38\xa0\xa6\xa1\xd2\xf5\x97\x88\x46\x54\x09\xc9\xe2\x84\x97\xc6\x21\x6f\xdb\x86\xa7\x46\x53\x43\x34\x75\xfc\x68\x67\xc2\x6d\x65\xe7\x63\xd1\xe2\x9a\x61\xe8\x3e\x25\xf4\x30\x87\xb7\x63\xf5\x8a\x4c\xdc\x5f\x01\xf5\xfa\xbf\x24\x81\xa5\x75\x4f\xfe\xe8\x27\xf4\x8e\x67\xe3\x24\x0c\x6a\x65\x5e\x81\x82\x7f\xba\x10\xb6\x46\xe6\x44\xe6\xae\x66\x6a\xfb\x29\xe1\x23\xfd\x05\x00\x00\xff\xff\xd5\x98\x99\x41\xdc\x00\x00\x00")

func templatesSql1UpTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSql1UpTpl,
		"templates/sql/1.up.tpl",
	)
}

func templatesSql1UpTpl() (*asset, error) {
	bytes, err := templatesSql1UpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/1.up.tpl", size: 220, mode: os.FileMode(420), modTime: time.Unix(1529686846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlSqlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcd\xb1\x4e\xc4\x30\x10\x04\xd0\xda\xf3\x15\x4b\x2a\x1b\x9d\x02\x0d\xe5\x35\x70\x0d\x05\xa2\xe0\x03\xd0\x26\xf1\x21\x0b\xe3\x38\x6b\x73\x42\x8a\xfc\xef\x68\x9d\xc2\xc5\xc8\x3b\x6f\x32\xcf\xdf\xfc\xe5\xa9\x6c\x11\x08\x3f\x79\x95\x4a\x16\x66\x58\xb8\xf2\xc4\xc5\x3f\x94\x2d\x0e\x80\xf9\xa4\x61\xdf\x69\x7c\x3d\x2e\x5a\x1b\xe0\x80\x1b\x0b\x2d\x13\xdd\x97\x2d\x8e\x97\x67\xe0\xfa\x9b\x66\x0a\x29\x54\xeb\x68\x87\xd1\x6f\x2f\xfd\xad\x02\xb3\x4c\xa7\x1e\xcf\x3a\x36\xbe\x67\x9f\x6c\x37\x2f\x12\x6e\x5e\xd4\x3c\x1d\x23\x2f\x6b\x4a\x1a\x1d\x4c\xb8\xf6\xca\xdd\x99\x52\x88\x6a\x9a\xcc\x29\xcc\xd6\x8b\x38\x98\x06\x55\xc7\x0f\x5f\xdf\xf8\x4f\x41\x6d\x16\xfb\xf4\xe8\xd0\xf0\x1f\x00\x00\xff\xff\xc2\xc8\x83\xc5\xda\x00\x00\x00")

func templatesSqlSqlTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlSqlTpl,
		"templates/sql/sql.tpl",
	)
}

func templatesSqlSqlTpl() (*asset, error) {
	bytes, err := templatesSqlSqlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/sql.tpl", size: 218, mode: os.FileMode(420), modTime: time.Unix(1529810757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlTypeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x4d\x0a\xc2\x30\x10\xc5\xf1\x7d\x4e\xf1\xe8\x5a\x7b\x00\x0f\xe0\xc2\x45\x15\xf4\x00\x0d\xed\x50\xaa\xe6\x83\x64\x5c\x94\x61\xee\x2e\x13\xa5\xbb\x64\xf8\xbd\x7f\xf6\xd3\xcb\x2f\x04\x11\xf4\xb7\xff\x5b\xd5\x39\x11\xac\x21\xa7\xc2\xb5\x7d\x79\xcb\x3f\x33\xf8\x60\x00\x95\xcb\x67\x62\x88\xc1\xe2\xe3\x42\xe8\xcf\x2b\xbd\xe7\x8a\xa3\xaa\x03\x60\x9a\xd3\xc3\x76\xfb\xc8\x02\xed\xa2\x8a\xf1\x59\x53\x3c\x75\x4d\x5d\xee\xd7\x61\x57\x87\x14\x56\xa6\x90\x79\xeb\x46\xab\x53\x9c\x5b\x53\xdd\x37\x00\x00\xff\xff\x13\x27\x22\xff\xac\x00\x00\x00")

func templatesSqlTypeTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlTypeTpl,
		"templates/sql/type.tpl",
	)
}

func templatesSqlTypeTpl() (*asset, error) {
	bytes, err := templatesSqlTypeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/type.tpl", size: 172, mode: os.FileMode(420), modTime: time.Unix(1529536770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/app/echo.tpl": templatesAppEchoTpl,
	"templates/app/gin.tpl": templatesAppGinTpl,
	"templates/app/grpc.tpl": templatesAppGrpcTpl,
	"templates/app/iris.tpl": templatesAppIrisTpl,
	"templates/app/ozzo.tpl": templatesAppOzzoTpl,
	"templates/gitignore.tpl": templatesGitignoreTpl,
	"templates/sql/1.down.tpl": templatesSql1DownTpl,
	"templates/sql/1.up.tpl": templatesSql1UpTpl,
	"templates/sql/sql.tpl": templatesSqlSqlTpl,
	"templates/sql/type.tpl": templatesSqlTypeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"echo.tpl": &bintree{templatesAppEchoTpl, map[string]*bintree{}},
			"gin.tpl": &bintree{templatesAppGinTpl, map[string]*bintree{}},
			"grpc.tpl": &bintree{templatesAppGrpcTpl, map[string]*bintree{}},
			"iris.tpl": &bintree{templatesAppIrisTpl, map[string]*bintree{}},
			"ozzo.tpl": &bintree{templatesAppOzzoTpl, map[string]*bintree{}},
		}},
		"gitignore.tpl": &bintree{templatesGitignoreTpl, map[string]*bintree{}},
		"sql": &bintree{nil, map[string]*bintree{
			"1.down.tpl": &bintree{templatesSql1DownTpl, map[string]*bintree{}},
			"1.up.tpl": &bintree{templatesSql1UpTpl, map[string]*bintree{}},
			"sql.tpl": &bintree{templatesSqlSqlTpl, map[string]*bintree{}},
			"type.tpl": &bintree{templatesSqlTypeTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

