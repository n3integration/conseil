// Code generated by go-bindata.
// sources:
// templates/app/echo.tpl
// templates/app/gin.tpl
// templates/app/grpc.tpl
// templates/app/iris.tpl
// templates/app/ozzo.tpl
// templates/gitignore.tpl
// templates/sql/1.down.tpl
// templates/sql/1.up.tpl
// templates/sql/migrations.tpl
// templates/sql/sql.tpl
// DO NOT EDIT!

package conseil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAppEchoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xc1\x6a\xdc\x30\x10\xbd\xeb\x2b\x06\x9d\x6c\xba\x48\x77\x43\x0e\x65\x49\x5b\x9a\xb0\x1b\x76\xd3\x53\xe9\x41\x91\xa7\xb6\x88\xad\x31\xa3\x71\x5c\x58\xfc\xef\x45\xab\x4d\x7d\x69\xeb\x8b\x25\xde\x3c\xbd\x37\xef\x4d\xce\xbf\xba\x0e\x61\x74\x21\x2a\x15\xc6\x89\x58\xa0\x52\x00\x00\x3a\xa2\xd8\x5e\x64\xd2\xaa\xdc\xbb\x20\xfd\xfc\x62\x3c\x8d\x76\x70\x2f\x49\x9c\x7f\xb5\xe8\x7b\xd2\xff\x87\xed\x18\xda\x76\xc0\xc5\x31\x6a\x55\x2b\xf5\xe6\x18\x5c\xdb\x32\xdc\x81\xbe\x5c\xc0\x7c\xa1\x24\xb0\xae\x4d\x3e\x3f\x65\xf9\x75\xd5\x4a\xfd\x9c\xa3\xbf\xba\xaa\x6a\xb8\x5c\x05\xac\x85\x3d\xa3\x13\x84\x88\x0b\x30\xcd\x82\x7c\x05\x18\x9a\x3b\xc8\x4a\xe6\x80\x4b\x55\xab\xf7\xe9\x33\xca\x3c\x81\xa7\x71\xa4\x08\x9b\x89\xc2\x31\xdf\x12\x96\x3d\xf3\xb7\xa1\xe6\x91\xba\x0e\xb9\xaa\x77\x7f\x03\x4f\xe8\xe9\x6d\x43\x37\xad\x13\x76\x21\x09\x32\xf4\xe8\x06\xe9\x01\x63\x3b\x51\x88\x72\x13\xfb\x7c\xff\x5c\x69\x5b\x30\xbd\xbb\x0d\x6d\xec\x03\x2d\x30\x64\x7e\x0c\xb1\x03\x8a\x0d\xe4\xdc\x1b\x6b\xff\x91\xcf\x3b\xef\xe3\x34\x0d\xc1\x3b\x09\x14\x21\x89\x63\xc1\xd6\xc0\x13\x63\x4a\xb0\x7f\x3e\x3d\x7e\xd8\x83\x10\xa4\x7e\x16\x68\x69\x89\xe6\x66\xa6\x6c\x68\x3e\x39\x71\x43\xc5\xe6\x9c\x89\x55\x6e\xa4\xae\xd5\xaa\x94\xb5\x70\xef\x7b\x82\xde\xc5\x76\x40\x2e\x4d\x14\xc7\x95\x2f\x39\xef\x29\x0a\xfe\x92\x1a\x90\x99\xf8\xd6\x0f\xa3\xcc\x1c\xc1\x9b\xaf\xe7\xe3\xa1\xca\x0b\xe4\xa7\x65\x4e\xc7\x87\x1d\x8c\x6e\xfa\x9e\x84\x43\xec\x7e\x94\xdf\xe5\x4f\xbc\x3a\x5d\xa7\x74\x03\xfa\xf8\xa0\x4b\xb0\x6b\xad\xd6\xdf\x01\x00\x00\xff\xff\xe2\xb7\xb1\x6d\x9b\x02\x00\x00")

func templatesAppEchoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppEchoTpl,
		"templates/app/echo.tpl",
	)
}

func templatesAppEchoTpl() (*asset, error) {
	bytes, err := templatesAppEchoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/echo.tpl", size: 667, mode: os.FileMode(420), modTime: time.Unix(1546197284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppGinTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xeb\x30\x10\x84\xef\xfa\x15\x83\x4e\xf6\x7b\x79\x56\x78\x47\x43\x0e\xc5\x2d\x09\x6d\x49\x42\x9a\x3f\xa0\xda\x1b\x5b\xd4\x59\x19\x69\xdd\x14\x82\xff\x7b\xb1\x9d\xd0\x53\x6f\xcb\x8e\xbe\x61\x34\xdb\xd9\xf2\xc3\xd6\x84\xb3\x75\xac\x94\x3b\x77\x3e\x08\x12\x05\x00\xba\x76\xd2\xf4\xef\x59\xe9\xcf\xa6\x76\xfc\xaf\xf6\xec\xca\x71\xd2\x2a\x55\xea\xd3\x06\xd8\xaa\x0a\x58\x41\x5f\xaf\xc8\x36\x3e\x0a\x86\x21\x1f\xe7\xfd\x68\x32\x0c\x5a\xa9\x53\xcf\xe5\xe4\x9d\xa4\xb8\x4e\xae\xc6\xa0\x08\x64\x85\xc0\x74\x41\xf0\xbd\x50\x98\x84\x80\x7c\x85\xda\x71\xf6\x48\x27\xdb\xb7\x92\xa4\xea\x0e\x1c\xa8\x76\x51\x28\xa0\x21\xdb\x4a\x03\xe2\xaa\xf3\x8e\x65\xe6\xb2\xf5\xd3\x31\xd1\x66\xd6\xf4\xe2\xf6\xe8\x87\xde\xfa\x0b\xda\x91\x67\xc7\x35\x3c\xe7\x68\x44\xba\xdc\x98\x5f\x62\xdf\xb9\x87\xae\x6b\x5d\x69\xc5\x79\x46\x14\x1b\x84\xaa\x0c\xfb\x40\x31\xa2\x38\x1e\x5e\xff\x16\x10\x8f\xd8\xf4\x82\xca\x5f\x38\xbb\x85\x39\xf4\x9c\x8c\xbd\xa4\x6a\x50\xca\x18\xac\x1d\xa3\xb1\x5c\xb5\x14\xe6\x36\xe6\x78\x49\x89\x3f\xe3\x67\x0b\xcf\x42\x5f\x72\x6f\xa7\xcc\x9e\xdf\x76\xdb\xe4\xff\x72\xb9\x98\xba\xd8\xcc\xeb\xe9\x1c\x51\xac\xf4\x51\xe7\xd0\xbb\x17\xbd\x98\xf6\x43\xaa\x86\xef\x00\x00\x00\xff\xff\x04\x8c\x36\xa6\xc2\x01\x00\x00")

func templatesAppGinTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppGinTpl,
		"templates/app/gin.tpl",
	)
}

func templatesAppGinTpl() (*asset, error) {
	bytes, err := templatesAppGinTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/gin.tpl", size: 450, mode: os.FileMode(420), modTime: time.Unix(1531309893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppGrpcTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x53\x1d\x8a\x4d\xb3\xd2\xdd\x90\x43\x09\x94\x52\x96\x65\xd9\xf6\x90\x5b\x51\xbc\x13\x45\x54\xab\x11\xa3\x71\x7c\x30\xfe\xef\x45\x72\xd2\xe6\xe4\x67\xcd\x7b\x9f\x46\xcf\x5a\x4f\x83\xc7\x84\xec\x04\x21\x33\x09\x8d\xdb\xc7\x72\x1e\x4d\x53\xf0\xf4\xe4\xe9\x37\x4d\xb2\xcf\x71\xf2\x21\x95\xbd\xe7\x3c\x0e\x46\x65\x37\xfe\x71\x1e\xe1\xc3\x85\xa4\x54\xf8\xc8\xc4\x02\x9d\x02\x00\xd0\x91\xbc\xde\x54\x42\xd1\x6a\x93\x9e\xc8\x47\x34\x9e\xa2\x4b\xde\x10\x7b\x5b\x49\x5a\xf5\x4a\x9d\xa7\x34\x36\x50\xd7\xc3\xd2\xdc\xd6\xc2\x81\xb1\xae\x95\x70\x86\x82\x7c\x45\x6e\x83\xc2\x57\x18\xf6\x50\xa3\xe6\x05\xe7\x9f\x6d\xd2\xf5\xea\x9e\x7a\x43\x1f\x8a\x20\x6f\xef\x38\x4d\xe7\x16\x0e\x23\xc2\x1c\xe4\xf2\x48\xb2\x16\xf2\xc9\xdc\xfd\xc7\xe3\xf1\xc6\x2a\x7c\xdd\xc1\xe7\x7c\x32\xdb\xff\xb2\xfe\x87\xbf\xd0\x0c\xb1\xda\x53\x48\x1e\x28\x0d\x70\x11\xc9\x83\xb5\xcb\x02\xe6\x3b\x15\x81\x75\x1d\xaa\x7e\xad\x65\xac\x6b\xcb\xc5\x50\x76\x80\xcc\x75\xed\x84\x62\x9e\x1b\xa0\xd3\x32\x66\xbd\x6b\x27\x3f\x28\xa4\x9a\xae\xa9\x4e\x3f\xb0\xf4\x0e\xf4\x03\x4e\xf7\x7d\x23\x86\x73\xe3\x7d\xda\x43\x0a\xf1\x56\x58\xbb\x89\xbc\xf9\xe6\xc4\xc5\x0e\x99\x37\xeb\xfa\x6f\xf7\xaf\x39\xc7\x30\x3a\x09\x94\xa0\x88\x63\xc1\x77\x03\xaf\x8c\xa5\xc0\xe1\xd7\xdb\xf3\x97\x03\x08\x41\xb9\x4c\x02\xef\x34\x27\x73\x2f\x7b\x6b\xa1\x8b\xa1\xf4\x6a\x55\x7f\x03\x00\x00\xff\xff\x2c\x01\xdc\x89\x32\x02\x00\x00")

func templatesAppGrpcTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppGrpcTpl,
		"templates/app/grpc.tpl",
	)
}

func templatesAppGrpcTpl() (*asset, error) {
	bytes, err := templatesAppGrpcTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/grpc.tpl", size: 562, mode: os.FileMode(420), modTime: time.Unix(1546197262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppIrisTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xcb\x8e\xa3\x30\x10\xbc\xfb\x2b\x4a\x3e\x19\x6d\x84\xef\x48\x7b\x88\x38\x6c\xf6\x95\x44\xd9\xfd\x81\x1e\xec\x01\x2b\xc4\xb6\xec\x66\x88\x14\xf1\xef\x23\x20\xcc\x9c\xe6\x66\x55\x75\x55\x97\xab\x23\x35\x57\x6a\x2d\x6e\xe4\xbc\x10\xee\x16\x43\x62\x28\x01\x00\xb2\x75\xdc\x0d\x2f\x65\x13\x6e\xfa\x4a\x4c\x89\xb2\x76\xc9\x65\x29\x0a\x21\xde\x28\x81\x8c\x49\xf8\x8e\x19\x2b\xf7\xc6\x24\x25\x1f\x0f\x94\x87\x90\x19\xd3\x54\xcd\xef\xf3\xec\x36\x4d\xb2\x10\xe2\x75\xf0\xcd\xb2\x45\x15\x78\x2c\xfe\x5a\xa3\x4e\x96\xd8\xc2\xdb\x11\x29\x0c\x6c\xd3\x42\x50\x8c\xa8\x9e\xbe\x47\x3b\xaa\x42\x6c\xf3\x17\xdb\xba\xcc\x36\xa1\xb3\xd4\x73\x07\xeb\x4d\x0c\xce\xf3\x26\x2b\x7f\x58\x56\x52\xaf\xac\xdc\x3d\xc7\x3e\xf5\xc7\x30\xa2\x9f\x1d\xbc\xf3\x2d\x82\xaf\xd0\x31\xc7\x4a\xeb\x2f\x82\x6f\xba\x7d\x8c\xbd\x6b\x88\x5d\xf0\xc8\x4c\x89\xad\x29\x71\x4e\x36\x67\xd4\xff\x2f\x7f\xbe\xd5\xe0\x80\xdc\x0d\x0c\x13\x46\x5f\x7e\xc4\xb9\x0c\x5e\xcd\x2d\x15\x62\x12\x42\x6b\xfc\x4c\x2e\xe3\x40\xde\xf4\x36\xad\x8d\xac\x09\x55\xc3\xf7\xf5\xbf\x75\xf0\x6c\xef\xbc\x75\xd4\xf0\xbd\xfc\xf5\xef\x74\x54\x0b\xf9\x97\xe2\x0a\x2f\xe7\xc9\x4c\x3c\x64\x59\x41\x9e\x7e\xcb\xdd\x82\x4f\xf3\xa2\xf7\x00\x00\x00\xff\xff\xa7\x03\xfb\x72\xd3\x01\x00\x00")

func templatesAppIrisTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppIrisTpl,
		"templates/app/iris.tpl",
	)
}

func templatesAppIrisTpl() (*asset, error) {
	bytes, err := templatesAppIrisTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/iris.tpl", size: 467, mode: os.FileMode(420), modTime: time.Unix(1546197247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppOzzoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xb1\x6e\xdb\x30\x10\xdd\xf9\x15\x07\x4e\x52\xeb\x90\xbb\x81\x0c\x81\x87\x06\xad\x61\x1b\x71\x8a\x0e\x45\x07\x56\xba\x50\x44\x25\x9e\x70\x3c\xc5\xad\x0d\xfd\x7b\x41\x49\x8e\xa7\xa2\xd1\x20\x51\xbc\xf7\xee\xee\xbd\xd7\xbb\xea\x97\xf3\x08\x9d\x0b\x51\xa9\xd0\xf5\xc4\x02\x85\x02\x00\xd0\x2d\x79\x3d\x9f\x22\x8a\x6d\x44\x7a\xad\xe6\x7f\x1f\xa4\x19\x7e\x9a\x8a\x3a\xeb\xe9\x8e\xce\x67\xb2\xf9\x75\xc7\x34\x48\x88\x57\xd6\x7f\x50\xd6\x55\x15\xa6\xf4\x4e\x70\x45\x51\x30\x8a\x56\xa5\x52\xaf\x8e\xc1\xd5\x35\xc3\x3d\xe8\xcb\x05\xcc\x23\x25\x81\x71\x5c\xe7\xf3\x21\x0b\x18\x47\xad\xd4\xcb\x10\xab\x49\x57\x51\xc2\x65\x1a\x62\x2d\x6c\x18\x9d\x20\x44\x3c\x41\xee\x8c\x3c\x15\x18\xd6\xf7\xb0\x4c\x32\x3b\x3c\x15\xa5\xba\x12\x8e\x28\x43\x0f\x15\x75\x1d\x45\xe8\x42\x5d\xb7\x78\x72\x8c\x33\xcd\x7c\x4d\x38\x9b\x95\x9f\x59\x8f\xd9\x92\xf7\xc8\x45\x4b\xde\x1c\x38\x44\x79\x29\x57\x6f\x90\x45\x85\x79\xfe\xd3\xe3\x0e\x3d\x49\x70\x42\x5c\x5c\xaf\x3f\x1f\xf7\xbb\x05\x7d\xdb\xe0\x09\x7d\x48\x82\x0c\x0d\xba\x56\x1a\xc0\x58\xf7\x14\xa2\x2c\x2b\x7c\x42\x29\xb4\x9d\x6b\x7a\xb5\x80\x6e\xec\x1d\x9d\xa0\xcd\xfc\x18\xa2\x07\x8a\x6b\xc8\x41\xae\xad\xfd\x87\x71\x57\xde\x43\xdf\xb7\xa1\x72\x12\x28\x42\x12\xc7\x82\xb5\x81\x03\x63\x4a\xb0\x79\x7e\xda\x7e\xdc\x80\x10\xa4\x66\x10\xa8\xe9\x14\xcd\x44\xcb\x9d\xcd\xa3\x8b\x75\x8b\x85\xb6\x7a\x05\x5c\xde\xee\xb7\xd3\x12\x0f\xb1\x3e\x22\xbf\x62\x91\xf3\x5b\x41\x0c\x6d\xa9\x46\xa5\xac\x85\xfd\xf9\x4c\xd0\x4c\x64\x9e\xb3\x9b\xa5\x14\x15\x7c\xb8\x46\xb3\xc9\x3e\xfd\x96\x12\x90\x99\x78\x49\x95\x51\x06\x8e\x50\x99\x6f\x1c\x04\x8b\xce\xf5\xdf\x93\x70\x88\xfe\xc7\xfc\xb9\xbc\xb9\xaf\x93\x38\x19\x92\x5e\x83\xde\x7f\xd1\xb3\xcf\x63\x9e\xff\x37\x00\x00\xff\xff\xf3\xe7\xa8\x4a\x06\x03\x00\x00")

func templatesAppOzzoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppOzzoTpl,
		"templates/app/ozzo.tpl",
	)
}

func templatesAppOzzoTpl() (*asset, error) {
	bytes, err := templatesAppOzzoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app/ozzo.tpl", size: 774, mode: os.FileMode(420), modTime: time.Unix(1531309893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignoreTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x0f\xd9\x99\x54\x39\x43\x4b\xbb\x28\x14\xba\xe9\x01\x22\x5b\x63\x79\x40\xd5\x08\x69\x94\xd4\x84\xf4\xec\x45\x34\x9b\xcf\x83\xff\x78\x07\xbc\x48\xf6\x55\xb8\x61\xd5\x8a\x52\x35\x56\xff\xdd\xe0\x73\x40\x49\x3d\x4a\x6e\x34\x39\xfe\xe1\xff\xfd\xa5\xc9\x85\x94\x68\x72\x4d\x07\xee\x49\x66\xa2\x03\xbe\xb8\x19\xe6\x51\xda\x8f\x98\xbb\xa4\x80\xab\xd8\x86\x73\x54\xd8\xf8\x9e\x96\x33\x4d\x6e\xe0\xd0\x3f\xbb\x95\x6e\xd0\x15\xb6\x31\xa2\x62\xd1\x0b\x57\x1f\x19\xa6\x9a\x8e\x68\x85\x17\x59\x65\xf1\x29\xed\xb8\x6e\x9c\xd1\x1b\x3f\x92\x1f\x62\xfc\xfe\xfa\x46\x93\xd3\x6e\x44\x4e\x02\x7b\x3a\x5d\x38\x07\xad\x74\xba\xdd\xe0\x9e\x4b\xc1\xfd\xfe\x17\x00\x00\xff\xff\x3a\xf0\xfe\x77\xda\x00\x00\x00")

func templatesGitignoreTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignoreTpl,
		"templates/gitignore.tpl",
	)
}

func templatesGitignoreTpl() (*asset, error) {
	bytes, err := templatesGitignoreTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gitignore.tpl", size: 218, mode: os.FileMode(420), modTime: time.Unix(1531284723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSql1DownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xcd\x4d\xc6\x30\x10\x84\xe1\x3b\x55\x4c\x01\x24\x12\x7d\x70\x00\x7d\x15\xac\xed\x21\x5e\x61\xaf\x89\x77\x4d\xda\x47\xfc\x49\x48\x14\x30\xcf\xbc\xdb\x86\xa7\x26\x99\xb8\x3d\x3f\xc2\x43\x82\x9d\x16\x8e\xa8\x12\x90\x49\x2c\x67\x41\x0c\x4c\xbe\x73\x06\xa2\x12\x45\x42\x92\x38\xe1\xb9\xb2\x0b\xba\x1e\x53\x42\x87\xdd\x6d\x1b\x2e\x8d\xaa\x86\xa8\xea\x78\xd1\xc6\x1d\xb7\x95\x9c\xe7\xa2\xc5\xbf\x01\xe6\x68\x2d\x49\x7e\x75\x78\x1d\xab\x15\x24\xe2\xed\xb3\xa7\xfc\xb1\x04\xb6\x97\x71\xd9\xee\x67\xfb\x32\xef\x71\x55\x4e\xc2\xa0\x96\xe7\x4f\xb1\xe0\xfb\x25\x13\xb6\x7a\xe2\x44\xe2\xa1\x66\x6a\xc7\xaf\x85\x87\xfd\x23\x00\x00\xff\xff\xf0\xf8\xca\x68\xf0\x00\x00\x00")

func templatesSql1DownTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSql1DownTpl,
		"templates/sql/1.down.tpl",
	)
}

func templatesSql1DownTpl() (*asset, error) {
	bytes, err := templatesSql1DownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/1.down.tpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531284723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSql1UpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x51\x4a\x04\x31\x10\x84\xe1\x77\x4f\x51\x07\x70\x02\xde\xc3\x07\x65\x4f\xd0\x49\xca\x49\x43\xd2\xb3\x9b\xee\xb0\xe0\xe9\x65\xc7\x79\xaf\xfa\xf8\xb7\x0d\x5f\x5d\x0a\x71\xfb\xfe\x84\x87\x04\x07\x2d\x1c\xd1\x24\x20\x93\x58\xce\x8a\x38\xa0\xa6\xa1\xd2\xf5\x97\x88\x46\x54\x09\xc9\xe2\x84\x97\xc6\x21\x6f\xdb\x86\xa7\x46\x53\x43\x34\x75\xfc\x68\x67\xc2\x6d\x65\xe7\x63\xd1\xe2\x9a\x61\xe8\x3e\x25\xf4\x30\x87\xb7\x63\xf5\x8a\x4c\xdc\x5f\x01\xf5\xfa\xbf\x24\x81\xa5\x75\x4f\xfe\xe8\x27\xf4\x8e\x67\xe3\x24\x0c\x6a\x65\x5e\x81\x82\x7f\xba\x10\xb6\x46\xe6\x44\xe6\xae\x66\x6a\xfb\x29\xe1\x23\xfd\x05\x00\x00\xff\xff\xd5\x98\x99\x41\xdc\x00\x00\x00")

func templatesSql1UpTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSql1UpTpl,
		"templates/sql/1.up.tpl",
	)
}

func templatesSql1UpTpl() (*asset, error) {
	bytes, err := templatesSql1UpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/1.up.tpl", size: 220, mode: os.FileMode(420), modTime: time.Unix(1531284723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlMigrationsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\x9c\x30\x10\x3d\x7b\x7e\xc5\xd4\x52\x2b\x90\x28\xbe\xf4\x94\x8a\x53\xd2\x43\x0f\x8d\xa2\x7e\xa8\xc7\xca\xc0\xc0\x8e\x0a\x36\x19\x9b\xad\xd2\x15\xff\xbd\x82\x65\xd9\x5d\x35\x8a\x72\xb2\x3c\xf3\xde\x9b\x79\x6f\x06\x5b\xfd\xb6\x2d\x61\x78\xec\x00\xb8\x1f\xbc\x44\x4c\x40\x69\x12\xf1\x12\x34\x28\xdd\xf4\x51\x03\xa8\x9e\x5b\xb1\x91\x50\xb7\x1c\x77\x63\x99\x57\xbe\x37\xad\xef\xac\x6b\xdf\xaf\x2d\x73\x7a\xf7\x1f\x66\xde\x6b\x70\xa6\xb6\xd1\x96\x36\x90\x39\x1c\x30\xbf\x13\xde\x93\xe0\x34\xcd\xf3\x8c\xc1\x86\x3b\xc2\x7a\x29\x82\xfa\xf5\xba\xc9\x26\xf8\x51\x2a\x32\x33\x57\x43\x0a\xb0\xb7\x82\x5f\x96\x36\x7b\x17\xb0\x40\xdd\x6f\x3f\x0d\x60\x0c\x7e\x1d\xdd\x05\x60\x20\x69\xbc\xf4\x01\xad\x7b\x42\xa1\xc7\x91\x85\x6a\x3c\xed\x89\x67\x32\x34\xa3\xab\xae\xc9\x49\x8a\x4b\x6e\x78\x00\xc5\x0d\xd6\x25\x16\x05\x3a\xee\xe6\xbf\x12\x8a\xa3\xb8\x23\x20\xe4\xf7\xf4\x27\xd1\x9b\xaa\xf3\x11\xd9\x71\x64\xdb\xf1\x5f\xaa\x75\x0a\x6a\x82\x45\x83\x44\xf0\xa6\xc0\xba\xcc\x1f\xd8\xb5\x49\xfa\x71\xa9\xbc\x79\x4e\xf6\xc8\xd9\x16\x7c\xb0\x71\x37\x53\x9b\x3e\xe6\xdf\x06\x61\x17\x9b\x44\xcf\xb1\xdc\x18\xf3\x36\xe8\xec\x22\x95\x14\xd4\x31\xe6\xec\x34\xef\xea\x1c\xf9\x4f\x8e\xbb\xcf\x2e\x44\xeb\x2a\x4a\xea\x32\xc3\x77\xd7\xfd\x5b\xef\x1a\x6e\x0f\x53\x0a\xaa\xdf\x24\xd6\x9b\xcc\x4e\x67\xfe\xdd\xea\x75\xd3\xb9\x5a\x34\xc3\xba\xfc\xfe\x34\x50\xb6\xde\x3b\xdd\xcc\xbf\x60\xf5\x1c\x4f\x9f\xff\x18\x9e\xc9\x66\x05\x14\xe7\x65\x3e\x89\xdc\xfb\xdb\x9d\x75\x2d\x2d\x88\x93\xa6\xe3\x0e\x94\x9a\xfe\x1b\x72\xd9\x9f\xfe\x05\x00\x00\xff\xff\xd5\xda\x12\x95\x2c\x03\x00\x00")

func templatesSqlMigrationsTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlMigrationsTpl,
		"templates/sql/migrations.tpl",
	)
}

func templatesSqlMigrationsTpl() (*asset, error) {
	bytes, err := templatesSqlMigrationsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/migrations.tpl", size: 812, mode: os.FileMode(420), modTime: time.Unix(1546198340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlSqlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xb1\x4e\xf4\x30\x10\x84\xfb\x7d\x8a\xfd\x53\x25\xbf\x4e\x86\x86\x06\x94\x86\xbb\x86\x02\x81\xc4\x03\x20\xfb\xbc\x39\x59\x18\x27\x59\xe7\x4e\x48\x91\xdf\x1d\xed\xc6\x05\x20\x51\x90\x2e\xa3\xfd\x66\xc6\x33\xd9\xe3\x9b\x3d\x11\xe6\x39\x02\x84\xf7\x69\xe4\x05\x5b\x40\x44\x6c\xbc\x5d\xac\xb3\x99\xae\xf2\x1c\x1b\x50\xed\x15\x9b\x75\x45\xf3\xb0\xdd\x95\xd2\x40\x07\x70\xb1\x8c\xde\xe1\xff\x3c\x47\x73\xb8\x07\x18\xce\xe9\x88\x4f\x13\xa5\xb6\x43\x62\x1e\x19\x57\x85\xe5\x8e\x98\x37\x4d\x15\xef\x76\xaa\xf4\x12\x6f\x14\x51\xff\x03\x87\x0b\xb1\xf8\xef\xb6\xc0\xfd\x98\x92\xfc\x76\x8a\x85\x41\xa9\x7f\x3d\xa6\x10\xab\xb9\x7c\x4c\xcb\x99\x93\x88\x6a\xab\x7a\x81\xaf\xc8\x6d\x8f\xde\x99\xe7\x90\x4e\x6d\x77\xf7\x67\x13\xef\xcc\x0b\x2d\x8f\xf6\x43\x9a\x4a\xa5\xdc\xde\x5c\x6f\x95\x2a\x25\x0f\x4a\x21\x42\xa9\x2b\xec\xe3\x98\xe9\xc7\x0c\x61\x90\xb5\x7e\xcb\xf5\xce\x54\xa8\x26\x7f\xef\x04\xe5\x33\x00\x00\xff\xff\x20\xa5\x2b\x90\xb1\x01\x00\x00")

func templatesSqlSqlTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlSqlTpl,
		"templates/sql/sql.tpl",
	)
}

func templatesSqlSqlTpl() (*asset, error) {
	bytes, err := templatesSqlSqlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sql/sql.tpl", size: 433, mode: os.FileMode(420), modTime: time.Unix(1546197295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/app/echo.tpl": templatesAppEchoTpl,
	"templates/app/gin.tpl": templatesAppGinTpl,
	"templates/app/grpc.tpl": templatesAppGrpcTpl,
	"templates/app/iris.tpl": templatesAppIrisTpl,
	"templates/app/ozzo.tpl": templatesAppOzzoTpl,
	"templates/gitignore.tpl": templatesGitignoreTpl,
	"templates/sql/1.down.tpl": templatesSql1DownTpl,
	"templates/sql/1.up.tpl": templatesSql1UpTpl,
	"templates/sql/migrations.tpl": templatesSqlMigrationsTpl,
	"templates/sql/sql.tpl": templatesSqlSqlTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"echo.tpl": &bintree{templatesAppEchoTpl, map[string]*bintree{}},
			"gin.tpl": &bintree{templatesAppGinTpl, map[string]*bintree{}},
			"grpc.tpl": &bintree{templatesAppGrpcTpl, map[string]*bintree{}},
			"iris.tpl": &bintree{templatesAppIrisTpl, map[string]*bintree{}},
			"ozzo.tpl": &bintree{templatesAppOzzoTpl, map[string]*bintree{}},
		}},
		"gitignore.tpl": &bintree{templatesGitignoreTpl, map[string]*bintree{}},
		"sql": &bintree{nil, map[string]*bintree{
			"1.down.tpl": &bintree{templatesSql1DownTpl, map[string]*bintree{}},
			"1.up.tpl": &bintree{templatesSql1UpTpl, map[string]*bintree{}},
			"migrations.tpl": &bintree{templatesSqlMigrationsTpl, map[string]*bintree{}},
			"sql.tpl": &bintree{templatesSqlSqlTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

